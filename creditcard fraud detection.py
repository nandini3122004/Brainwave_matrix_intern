# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JTxnnLoDwJmO6-3Iveja4E1jvfpvUHM6
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import IsolationForest
from sklearn.metrics import classification_report, roc_auc_score, confusion_matrix
from imblearn.over_sampling import SMOTE
url = "https://storage.googleapis.com/download.tensorflow.org/data/creditcard.csv"
df = pd.read_csv(url)
print("Dataset loaded successfully!")
print(f"Dataset shape: {df.shape}")
print("Class distribution:\n", df["Class"].value_counts())
X = df.drop(columns=["Class"])
y = df["Class"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42, stratify=y)
print("\nPerforming anomaly detection using Isolation Forest...")
iso_forest = IsolationForest(n_estimators=100, contamination=0.002, random_state=42)
y_pred_anomaly = iso_forest.fit_predict(X_test)
y_pred_anomaly = np.where(y_pred_anomaly == -1, 1, 0)
print("\nAnomaly Detection Results:")
print(classification_report(y_test, y_pred_anomaly))
print("ROC AUC Score:", roc_auc_score(y_test, y_pred_anomaly))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred_anomaly))
print("\nHandling imbalanced data with SMOTE...")
smote = SMOTE(sampling_strategy=0.1, random_state=42)
X_train_smote, y_train_smote = smote.fit_resample(X_train, y_train)
print("Class distribution after SMOTE:\n", pd.Series(y_train_smote).value_counts())
print("\nTraining supervised learning model (Logistic Regression)...")
lr_model = LogisticRegression(random_state=42, max_iter=1000)
lr_model.fit(X_train_smote, y_train_smote)
y_pred_supervised = lr_model.predict(X_test)
y_proba_supervised = lr_model.predict_proba(X_test)[:, 1]
print("\nSupervised Learning Results:")
print(classification_report(y_test, y_pred_supervised))
print("ROC AUC Score:", roc_auc_score(y_test, y_proba_supervised))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred_supervised))